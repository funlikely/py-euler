# Highly divisible triangular number
#
# Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1
# + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

from utilities.divisors import divisor_counter
from utilities.primes import get_primes, prime_factors, divisor_counter_fast


def triangle(z):
    return z * (z + 1) / 2


def main():
    # test triangle
    for j in range(10):
        print(str(j) + "th triangle number = " + str(triangle(j)))

    # test divisor_counter
    for p in range(100):
        print(str(p) + " has " + str(divisor_counter(p)) + " divisors!")

    # test get_primes
    print("The first 1000 primes are " + str(get_primes(1000)))

    # test prime_factors
    for n in range(50):
        print("The prime factors of " + str(n) + " are " + str(prime_factors(n)) + " and the number of divisors is " +
              str(divisor_counter_fast(n)))

    answer_found = False
    triangle_step = 12000
    max_divisor_count = 2
    while not answer_found and triangle_step < 20000:
        current_divisor_count = divisor_counter_fast(triangle(triangle_step))
        if current_divisor_count > 500:
            answer_found = True
            print(str(triangle(triangle_step)) + " has " + str(current_divisor_count) + " divisors!")
        if triangle_step % 250 == 0:
            print(
                "Trying out triangle(" + str(triangle_step) + ") by the way, and it has " + str(current_divisor_count) +
                " divisors.")
        if current_divisor_count > max_divisor_count:
            max_divisor_count = current_divisor_count
            print("New leader in divisors is triangle(" + str(triangle_step) + ") with " + str(
                max_divisor_count) + " divisors")
        triangle_step += 1

    if not answer_found:
        print("You must go higher than triangle(" + str(triangle_step) + ")")


if __name__ == "__main__":
    main()
