"""
Problem 29
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct
terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

"""


def get_distinct_power_count(a_interval, b_interval):
    """
    Getting those distinct powers, using prime factors for representation.
    :return: set of distinct powers a^b where a and b are in the integers defined by (a_min, a_max) and (b_min, b_max)
    """
    a_min, a_max = a_interval
    b_min, b_max = b_interval

    distinct_powers = {2, 3, 4}

    for a in range(a_min, a_max + 1):
        for b in range(b_min, b_max + 1):
            prime_decomposition = decompose_primes(a)
            distinct_powers = apply_power_to_decomposition(prime_decomposition, b) + distinct_powers

    return distinct_powers


def main():
    distinct_powers = get_distinct_power_count((2, 100), (2, 100))
    # print(f"The first couple diagonal sums are {list(square_diagonals_sums.values())[:6]}")
    print(f"The Answer to Project Euler 029 is {len(distinct_powers)}")


if __name__ == "__main__":
    main()

