"""
    Cyclical figurate numbers

    Problem 61

    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
    Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
    Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
    Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
    Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
    Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
    Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

        The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
        Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
        This is the only set of 4-digit numbers with this property.

    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""


def tr(n): return int(n * (n + 1) / 2)


def sq(n): return n * n


def pe(n): return int(n * (3 * n - 1) / 2)


def hx(n): return n * (2 * n - 1)


def he(n): return int(n * (5 * n - 3) / 2)


def oc(n): return n * (3 * n - 2)


def is_candidate(word):
    odd_chars = [a for i, a in enumerate(word) if i % 2 == 1]
    if len([odd_chars.count(str(i)) for i in range(10) if odd_chars.count(str(i)) % 2 == 0]) < 10:
        return False
    even_chars = [a for i, a in enumerate(word) if i % 2 == 0]
    if len([even_chars.count(str(i)) for i in range(10) if even_chars.count(str(i)) % 2 == 0]) < 10:
        return False
    return True


def is_candidate2(word):
    char_pairs = [word[i:i + 2] for i, a in enumerate(word) if i % 2 == 0 and i < (len(word) - 1)]
    if len([char_pairs.count(str(i) + str(j)) for i in range(10) for j in range(10) if
            char_pairs.count(str(i) + str(j)) % 2 == 0]) < 100:
        return False
    return True


def get_special_sum():
    tri = [tr(n) for n in range(1, 200) if 1000 <= tr(n) <= 9999 and str(tr(n))[2] != '0']
    square = [sq(n) for n in range(1, 100) if 1000 <= n * n <= 9999 and str(sq(n))[2] != '0']
    pent = [pe(n) for n in range(1, 100) if 1000 <= int(n * (3 * n - 1) / 2) <= 9999 and str(pe(n))[2] != '0']
    hex = [hx(n) for n in range(1, 100) if 1000 <= n * (2 * n - 1) <= 9999 and str(hx(n))[2] != '0']
    hept = [he(n) for n in range(1, 100) if 1000 <= int(n * (5 * n - 3) / 2) <= 9999 and str(he(n))[2] != '0']
    oct = [oc(n) for n in range(1, 100) if 1000 <= n * (3 * n - 2) <= 9999 and str(oc(n))[2] != '0']

    print(
        f"count(tri) = {len(tri)}, count(square) = {len(square)}, count(pent) = {len(pent)}, count(hex) = {len(hex)}, "
        f"count(hept) = {len(hept)}, count(oct) = {len(oct)}, ")
    print(tri)
    print(square)
    print(pent)
    print(hex)
    print(hept)
    print(oct)

    product = len(tri) * len(square) * len(pent) * len(hex) * len(hept) * len(oct)

    candidates = []
    count = 0
    print(f"combinations: {product}")
    for a in tri:
        for b in square:
            for c in pent:
                for d in hex:
                    for e in hept:
                        for f in oct:
                            if is_candidate(str(a) + str(b) + str(c) + str(d) + str(e) + str(f)):
                                count += 1
                                candidates.append([a, b, c, d, e, f])
                                if count % 10000:
                                    print(f"count = {count}, candidates = {candidates}")
    print(candidates)
    return 0


def main():
    answer = get_special_sum()
    print(f"The Answer to Project Euler 061 is {answer}")

    # The Answer to Project Euler 061 is


if __name__ == "__main__":
    main()
